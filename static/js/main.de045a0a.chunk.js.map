{"version":3,"sources":["App.jsx","index.js"],"names":["sdk","ThirdwebSDK","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","useWeb3","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","useState","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","useEffect","getAll","then","catch","err","length","proposalId","getAllClaimerAddresses","addresses","getAllHolderBalances","amounts","memberList","useMemo","map","tokenAmount","ethers","utils","formatUnits","setProviderOrSigner","a","balanceOf","gt","UnsupportedChainIdError","className","onClick","member","str","substring","onSubmit","e","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","document","getElementById","type","checked","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","index","description","id","name","value","defaultChecked","htmlFor","label","disabled","claim","finally","ReactDOM","render","StrictMode","connectors","injected","supportedChainIds"],"mappings":"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","file":"static/js/main.de045a0a.chunk.js","sourcesContent":["import { useEffect,  useMemo, useState } from 'react';\nimport { useWeb3 } from \"@3rdweb/hooks\"\nimport { ethers } from \"ethers\";\nimport {  ThirdwebSDK } from \"@3rdweb/sdk\"\nimport { UnsupportedChainIdError } from \"@web3-react/core\";\n\n\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0x9a4EC8D2dC4565C91119397Cac7d4b7cd2c37Aa6\",\n);\n\nconst tokenModule = sdk.getTokenModule(\n  \"0x4c24eb86788d497F0C7268a6b5933fE28f36AC82\"\n);\n\nconst voteModule = sdk.getVoteModule(\n  \"0xe4C9e43B33f422802247187D9a86072C3bfa234d\",\n);\n\nconst App = () => {\n\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"ðŸ‘‹ Address:\", address)\n\n  const signer = provider ? provider.getSigner() : undefined;\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\n  const [isClaiming, setIsClaiming] = useState(false);\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n\n  const [memberAddresses, setMemberAddresses] = useState([]);\n\n  // voting\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);  \n\n  // Retrieve all our existing proposals from the contract.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // A simple call to voteModule.getAll() to grab the proposals.\n    voteModule\n      .getAll()\n      .then((proposals) => {\n        // Set state!\n        setProposals(proposals);\n        console.log(\"ðŸŒˆ Proposals:\", proposals)\n      })\n      .catch((err) => {\n        console.error(\"failed to get proposals\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // We also need to check if the user already voted.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n    if (!proposals.length) {\n      return;\n    }\n\n    // Check if the user has already voted on the first proposal.\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((hasVoted) => {\n        setHasVoted(hasVoted);\n        if (hasVoted) {\n          console.log(\"ðŸ¥µ User has already voted\");\n        } else {\n          console.log(\"ðŸ™‚ User has not voted yet\");\n        }\n      })\n      .catch((err) => {\n        console.error(\"failed to check if wallet has voted\", err);\n      });\n  }, [hasClaimedNFT, proposals, address]);\n\n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  }\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return ;\n    }\n\n    bundleDropModule\n      .getAllClaimerAddresses(\"0\")\n      .then((addresses) => {\n        console.log(\"ðŸš€ Members addresses\", addresses)\n        setMemberAddresses(addresses);\n      })\n      .catch(err => {\n        console.error(\"failed to get member list\", err);\n      })\n  }, [hasClaimedNFT]);\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n  \n    // Grab all the balances.\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"ðŸ‘œ Amounts\", amounts)\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error(\"failed to get token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // Now, we combine the memberAddresses and memberTokenAmounts into a single array\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // If the address isn't in memberTokenAmounts, it means they don't\n          // hold any of our token.\n          memberTokenAmounts[address] || 0,\n          18,\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  useEffect(() => {\n    sdk.setProviderOrSigner(signer);\n  }, [signer])\n\n  useEffect(async () => {\n    if (!address) return ;\n    try {\n      const balance = await bundleDropModule\n        .balanceOf(address, '0');\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"ðŸŒŸ this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"ðŸ˜­ this user doesn't have a membership NFT.\");\n      }\n    } catch (error) {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    }\n  }, [address])\n\n  if (error instanceof UnsupportedChainIdError ) {\n    return (\n      <div className=\"unsupported-network\">\n        <h2>Please connect to Rinkeby</h2>\n        <p>\n          This dapp only works on the Rinkeby network, please switch networks\n          in your connected wallet.\n        </p>\n      </div>\n    );\n  }\n\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1>Welcome to FUNDao</h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    )\n  }\n\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>FunDAO Member Page</h1>\n        <p>Congratulations on being a member</p>\n        <div>\n          <div>\n            <h2>Member List</h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th>Token Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td>{shortenAddress(member.address)}</td>\n                      <td>{member.tokenAmount}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form\n              onSubmit={async (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n\n                //before we do async things, we want to disable the button to prevent double clicks\n                setIsVoting(true);\n\n                // lets get the votes from the form for the values\n                const votes = proposals.map((proposal) => {\n                  let voteResult = {\n                    proposalId: proposal.proposalId,\n                    //abstain by default\n                    vote: 2,\n                  };\n                  proposal.votes.forEach((vote) => {\n                    const elem = document.getElementById(\n                      proposal.proposalId + \"-\" + vote.type\n                    );\n\n                    if (elem.checked) {\n                      voteResult.vote = vote.type;\n                      return;\n                    }\n                  });\n                  return voteResult;\n                });\n\n                // first we need to make sure the user delegates their token to vote\n                try {\n                  //we'll check if the wallet still needs to delegate their tokens before they can vote\n                  const delegation = await tokenModule.getDelegationOf(address);\n                  // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                  if (delegation === ethers.constants.AddressZero) {\n                    //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                    await tokenModule.delegateTo(address);\n                  }\n                  // then we need to vote on the proposals\n                  try {\n                    await Promise.all(\n                      votes.map(async (vote) => {\n                        // before voting we first need to check whether the proposal is open for voting\n                        // we first need to get the latest state of the proposal\n                        const proposal = await voteModule.get(vote.proposalId);\n                        // then we check if the proposal is open for voting (state === 1 means it is open)\n                        if (proposal.state === 1) {\n                          // if it is open for voting, we'll vote on it\n                          return voteModule.vote(vote.proposalId, vote.vote);\n                        }\n                        // if the proposal is not open for voting we just return nothing, letting us continue\n                        return;\n                      })\n                    );\n                    try {\n                      // if any of the propsals are ready to be executed we'll need to execute them\n                      // a proposal is ready to be executed if it is in state 4\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          // we'll first get the latest state of the proposal again, since we may have just voted before\n                          const proposal = await voteModule.get(\n                            vote.proposalId\n                          );\n\n                          //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                          if (proposal.state === 4) {\n                            return voteModule.execute(vote.proposalId);\n                          }\n                        })\n                      );\n                      // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                      setHasVoted(true);\n                      // and log out a success message\n                      console.log(\"successfully voted\");\n                    } catch (err) {\n                      console.error(\"failed to execute votes\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to vote\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to delegate tokens\");\n                } finally {\n                  // in *either* case we need to set the isVoting state to false to enable the button again\n                  setIsVoting(false);\n                }\n              }}\n            >\n              {proposals.map((proposal, index) => (\n                <div key={proposal.proposalId} className=\"card\">\n                  <h5>{proposal.description}</h5>\n                  <div>\n                    {proposal.votes.map((vote) => (\n                      <div key={vote.type}>\n                        <input\n                          type=\"radio\"\n                          id={proposal.proposalId + \"-\" + vote.type}\n                          name={proposal.proposalId}\n                          value={vote.type}\n                          //default the \"abstain\" vote to chedked\n                          defaultChecked={vote.type === 2}\n                        />\n                        <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                          {vote.label}\n                        </label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n              <button disabled={isVoting || hasVoted} type=\"submit\">\n                {isVoting\n                  ? \"Voting...\"\n                  : hasVoted\n                    ? \"You Already Voted\"\n                    : \"Submit Votes\"}\n              </button>\n              <small>\n                This will trigger multiple transactions that you will need to\n                sign.\n              </small>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const mintNft = () => {\n    setIsClaiming(true);\n      // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n      bundleDropModule\n        .claim(\"0\", 1)\n        .catch((err) => {\n          console.error(\"failed to claim\", err);\n          setIsClaiming(false);\n        })\n        .finally(() => {\n          // Stop loading state.\n          setIsClaiming(false);\n          // Set claim state.\n          setHasClaimedNFT(true);\n          // Show user their fancy new NFT!\n          console.log(\n            `Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n          );\n        });\n  }\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free FunDAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={mintNft}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\n// import third web\nimport { ThirdwebWeb3Provider } from '@3rdweb/hooks'\n\nconst supportedChainIds = [4];\n\nconst connectors = {\n  injected: {},\n}\n\n// Render the App component to the DOM\nReactDOM.render(\n  <React.StrictMode>\n    <ThirdwebWeb3Provider\n      connectors={connectors}\n      supportedChainIds={supportedChainIds}\n    >\n      <App />\n    </ThirdwebWeb3Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}